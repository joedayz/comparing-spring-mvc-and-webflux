#!/bin/bash

# Script para iniciar la demo de WebFlux vs Spring Web
# Autor: Demo para alumnos
# Fecha: $(date)

echo "üöÄ Iniciando Demo WebFlux vs Spring Web"
echo "========================================"

# Verificar si Docker/Podman est√° instalado
if ! command -v podman &> /dev/null; then
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Error: No se encontr√≥ Podman ni Docker instalado"
        echo "Por favor instala Podman o Docker para continuar"
        exit 1
    else
        echo "üê≥ Usando Docker"
        DOCKER_CMD="docker"
    fi
else
    echo "üü¢ Usando Podman"
    DOCKER_CMD="podman"
fi

# Verificar si Java est√° instalado
if ! command -v java &> /dev/null; then
    echo "‚ùå Error: Java no est√° instalado"
    echo "Por favor instala Java 21 o superior"
    exit 1
fi

# Verificar versi√≥n de Java
JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
if [ "$JAVA_VERSION" -lt 21 ]; then
    echo "‚ùå Error: Java 21 o superior es requerido"
    echo "Versi√≥n actual: $(java -version 2>&1 | head -n 1)"
    echo "Por favor actualiza a Java 21 o superior"
    exit 1
fi

echo "‚úÖ Java encontrado: $(java -version 2>&1 | head -n 1)"

# Verificar si Gradle est√° disponible
if ! command -v ./gradlew &> /dev/null; then
    echo "‚ùå Error: Gradle wrapper no encontrado"
    echo "Aseg√∫rate de estar en el directorio ra√≠z del proyecto"
    exit 1
fi

echo "‚úÖ Gradle wrapper encontrado"

# Detener contenedores existentes si los hay
echo "üõë Deteniendo contenedores existentes..."
$DOCKER_CMD-compose down 2>/dev/null || true

# Iniciar MongoDB
echo "üóÑÔ∏è  Iniciando MongoDB..."
$DOCKER_CMD-compose up -d mongodb

# Esperar a que MongoDB est√© listo
echo "‚è≥ Esperando a que MongoDB est√© listo..."
sleep 10

# Verificar que MongoDB est√© funcionando
echo "‚è≥ Verificando que MongoDB est√© funcionando..."
for i in {1..15}; do
    if $DOCKER_CMD exec demo-mongodb mongosh --eval "db.runCommand('ping')" > /dev/null 2>&1; then
        echo "‚úÖ MongoDB est√° funcionando correctamente"
        break
    fi
    if [ $i -eq 15 ]; then
        echo "‚ùå Error: MongoDB no est√° respondiendo despu√©s de 30 segundos"
        echo "Revisa los logs con: $DOCKER_CMD-compose logs mongodb"
        exit 1
    fi
    echo "‚è≥ Esperando... ($i/15)"
    sleep 2
done

# Inicializar la base de datos
echo "üìä Inicializando base de datos con datos de ejemplo..."
$DOCKER_CMD exec demo-mongodb mongosh --file /docker-entrypoint-initdb.d/init.js

# Compilar la aplicaci√≥n
echo "üî® Compilando la aplicaci√≥n..."
./gradlew clean build -x test

if [ $? -ne 0 ]; then
    echo "‚ùå Error en la compilaci√≥n"
    exit 1
fi

echo "‚úÖ Aplicaci√≥n compilada exitosamente"

# Iniciar la aplicaci√≥n
echo "üöÄ Iniciando la aplicaci√≥n Spring Boot..."
echo "La aplicaci√≥n estar√° disponible en: http://localhost:8080"
echo ""
echo "üìã Endpoints disponibles:"
echo "  ‚Ä¢ WebFlux (Reactivo): http://localhost:8080/api/v1/reactive/expenses"
echo "  ‚Ä¢ Spring Web (Tradicional): http://localhost:8080/api/v1/traditional/expenses"
echo "  ‚Ä¢ Comparaci√≥n: http://localhost:8080/api/v1/comparison/performance-test"
echo "  ‚Ä¢ MongoDB Express: http://localhost:8081 (admin/password123)"
echo ""
echo "üîÑ Para ejecutar pruebas de rendimiento:"
echo "  curl http://localhost:8080/api/v1/comparison/performance-test"
echo "  curl http://localhost:8080/api/v1/comparison/stress-test"
echo ""
echo "‚èπÔ∏è  Para detener la aplicaci√≥n: Ctrl+C"
echo "üóëÔ∏è  Para limpiar contenedores: $DOCKER_CMD-compose down"

# Ejecutar la aplicaci√≥n
./gradlew bootRun
